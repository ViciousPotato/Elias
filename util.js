// Generated by CoffeeScript 1.8.0
(function() {
  var pdc, temp, _;

  _ = require('underscore');

  temp = require('temp');

  pdc = require('pdc');

  module.exports.parse_bit = function(content) {
    var last_line, lines, topics;
    if (!content) {
      return null;
    }
    lines = content.split('\n');
    last_line = _.last(lines);
    if ((last_line != null ? last_line.search(/^\s*\[.*\]+\s*$/) : void 0) >= 0) {
      topics = _.map(last_line.match(/\[[^\]]*\]/g), function(s) {
        return s.substr(1, s.length - 2);
      });
      return {
        content: lines.slice(0, -1).join('\n'),
        topics: topics
      };
    } else {
      return {
        content: content,
        topics: []
      };
    }
  };

  module.exports.bit_summary = function(content) {
    if (content.length <= 200) {
      return content;
    }
    return content.slice(0, +(200 - 1) + 1 || 9e9) + content.slice(200).split('\n')[0];
  };

  module.exports.join_topics = function(topics) {
    var topic;
    return ((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = topics.length; _i < _len; _i++) {
        topic = topics[_i];
        _results.push("[" + topic + "]");
      }
      return _results;
    })()).join('');
  };

  module.exports.shorten_text = function(text, len) {
    var left, right;
    switch (false) {
      case !(len >= text.length):
        return text;
      case !(len <= 3):
        return '...';
      default:
        left = Math.ceil((len - 3) / 2);
        right = len - 3 - left;
        return text.slice(0, left) + '...' + text.slice(text.length - right, text.length);
    }
  };

  module.exports.shorten_bit = function(chars, line_length, disp_lines) {
    var line, lines, res, showingLines, _i, _len;
    if (line_length == null) {
      line_length = 35;
    }
    if (disp_lines == null) {
      disp_lines = 20;
    }
    showingLines = 0;
    lines = chars.split("\n");
    res = [];
    for (_i = 0, _len = lines.length; _i < _len; _i++) {
      line = lines[_i];
      showingLines += Math.ceil(line.length / line_length);
      if (showingLines > disp_lines) {
        res.push("...");
        break;
      } else {
        res.push(line);
      }
    }
    return res.join("\n");
  };

  module.exports.beautify_md = function(s) {
    var r, replace, replace_s;
    replace_s = {
      "```": "",
      "####": "",
      "###": "",
      "##": "",
      "#": "",
      "^>": "",
      "!\\[(.+?)\\]\\(.+?\\)": "$1"
    };
    for (r in replace_s) {
      replace = replace_s[r];
      s = s.replace(new RegExp(r, "g"), replace);
    }
    return s;
  };

  module.exports.bits_to_pdf = function(bits, callback) {
    return temp.open({
      "prefix": 'elias_gen_pdf_',
      "suffix": ".pdf"
    }, function(error, info) {
      var contents, md;
      contents = _.map(bits, function(bit) {
        return bit.content;
      });
      md = contents.join("\n");
      console.log(md);
      return pdc(md, 'markdown', 'latex', "-o" + info.path, function(error, result) {
        return callback(error, info.path);
      });
    });
  };

}).call(this);
