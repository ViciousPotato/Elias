// Generated by CoffeeScript 1.10.0
(function() {
  var Article, Bit, _, articleSchema, mongoose, util;

  mongoose = require('mongoose');

  _ = require('underscore');

  Bit = require('./bit');

  util = require('../util');

  articleSchema = new mongoose.Schema({
    topic: String,
    content: String,
    bits: [],
    created: {
      type: Date,
      "default": Date.now
    },
    updated: {
      type: Date,
      "default": Date.now
    }
  });

  articleSchema.statics.createIfNotExists = function(name, content, cb) {
    var article;
    article = new Article({
      topic: name,
      content: content
    });
    return article.save(cb);
  };

  articleSchema.statics.get = function(topic, cb) {
    return Bit.bitsInTopic(topic, function(error, bits) {
      if (error) {
        return cb(error);
      }
      return Article.findOne({
        topic: topic
      }, function(error, article) {
        var contents;
        if (error || !article) {
          contents = _.map(bits, function(bit) {
            return bit.content;
          });
          article = new Article({
            content: contents.join('\n\n'),
            topic: topic
          });
          return article.save(function(error, article) {
            if (error) {
              return cb(error);
            }
            article.bits = bits;
            return cb(null, article);
          });
        } else {
          article.bits = bits;
          return cb(null, article);
        }
      });
    });
  };

  articleSchema.statics.topics = function(callback) {
    return Article.find({}, function(error, articles) {
      var topics;
      if (error) {
        return callback(error, null);
      }
      topics = _.map(articles, function(article) {
        return [article.topic, article.updated];
      });
      return callback(null, topics);
    });
  };

  Article = mongoose.model('Article', articleSchema);

  module.exports = Article;

}).call(this);
